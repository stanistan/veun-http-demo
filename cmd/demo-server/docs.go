// Code Generated by github.com/stanistan/veun-http-demo/cmd/lit-gen; DO NOT EDIT.
package main

import (
	"io/fs"
	"log/slog"
	"net/http"
	"path/filepath"
	"strings"
	"sync"

	"github.com/stanistan/veun"
	"github.com/stanistan/veun/html"
	"github.com/stanistan/veun/vhttp/request"

	"github.com/stanistan/veun-http-demo/docs"
	"github.com/stanistan/veun-http-demo/internal/view/md"
)

var getDocFiles = sync.OnceValue(
	func() []string {
		var filenames []string
		if err := fs.WalkDir(docs.Docs, ".", func(path string, entry fs.DirEntry, err error) error {
			if err != nil {
				slog.Warn("get doc files", "err", err)
				return nil
			}

			if !entry.IsDir() && strings.HasSuffix(path, ".go.md") {
				filenames = append(filenames, path)
			}

			return nil
		}); err != nil {
			panic(err)
		}

		return filenames
	},
)

func docFilesIndex() veun.AsView {
	var filenames []veun.AsView

	for _, name := range getDocFiles() {
		var (
			n    = strings.TrimSuffix(name, ".go.md")
			href = filepath.Join("/docs", n)
		)
		filenames = append(
			filenames,
			html.Li(
				nil,
				html.A(html.Attrs{"href": href}, html.Text(n)),
			),
		)
	}

	return html.Section(nil,
		html.H3(nil, html.Text("Articles")),
		html.Ol(nil, filenames...),
	)
}

var docsIndex = request.Always(docFilesIndex())

var index = request.Always(veun.Views{
	md.View(docs.Index),
	docFilesIndex(),
})

var docsPage = request.HandlerFunc(
	func(r *http.Request) (veun.AsView, http.Handler, error) {
		if r.URL.Path == "" {
			//
			// N.B. if we have no slug do the index!
			return docsIndex.ViewForRequest(r)
		}

		bs, err := docs.Docs.ReadFile(r.URL.Path + ".go.md")
		if err != nil {
			return nil, http.NotFoundHandler(), nil
		}

		return md.View(bs), nil, nil
	},
)
