// Code Generated by github.com/stanistan/veun-http-demo/cmd/lit-gen; DO NOT EDIT.
package main

import (
	"net/http"

	"github.com/stanistan/veun"
	"github.com/stanistan/veun/el"
	"github.com/stanistan/veun/vhttp/request"

	static "github.com/stanistan/veun-http-demo/docs"
	"github.com/stanistan/veun-http-demo/internal/docs"
	"github.com/stanistan/veun-http-demo/internal/view/md"
)

func treeView(n docs.Node) veun.AsView {
	var children []veun.AsView
	for _, name := range n.SortedKeys() {
		children = append(children, el.Li().Content(treeView(n.Children[name])))
	}

	name, href := n.LinkInfo()
	if len(children) == 0 {
		return el.Div().Content(el.A().Attr("href", href).InnerText(name))
	}

	return el.Div().Content(
		el.Div().InnerText(name+"/"),
		el.Ul().Content(children...),
	)
}

func docFilesIndex() veun.AsView {
	return el.Div().Class("doc-tree").Content(treeView(docs.Tree()))
}

var docsIndex = request.Always(docFilesIndex())

var index = request.Always(veun.Views{
	md.View(static.Index),
	veun.Raw("<hr />"),
	docFilesIndex(),
})

var docsPage = request.HandlerFunc(func(r *http.Request) (veun.AsView, http.Handler, error) {
	if r.URL.Path == "" {
		return docsIndex.ViewForRequest(r)
	}

	bs, err := static.Docs.ReadFile(r.URL.Path + ".go.md")
	if err != nil {
		return nil, http.NotFoundHandler(), nil
	}

	return el.Div().Class("doc-page-cols").Content(
		el.Div().Content(docFilesIndex()),
		el.Div().Content(md.View(bs)),
	), nil, nil
})
